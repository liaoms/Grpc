// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Algorithm_FileProcess.proto

#include "Algorithm_FileProcess.pb.h"
#include "Algorithm_FileProcess.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Algorithm {

static const char* FileProcess_method_names[] = {
  "/Algorithm.FileProcess/Process",
  "/Algorithm.FileProcess/ListFeatures",
};

std::unique_ptr< FileProcess::Stub> FileProcess::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileProcess::Stub> stub(new FileProcess::Stub(channel));
  return stub;
}

FileProcess::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Process_(FileProcess_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFeatures_(FileProcess_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status FileProcess::Stub::Process(::grpc::ClientContext* context, const ::Algorithm::Request& request, ::Algorithm::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Algorithm::Request, ::Algorithm::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Process_, context, request, response);
}

void FileProcess::Stub::experimental_async::Process(::grpc::ClientContext* context, const ::Algorithm::Request* request, ::Algorithm::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Algorithm::Request, ::Algorithm::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, std::move(f));
}

void FileProcess::Stub::experimental_async::Process(::grpc::ClientContext* context, const ::Algorithm::Request* request, ::Algorithm::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Algorithm::Response>* FileProcess::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::Algorithm::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Algorithm::Response, ::Algorithm::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Algorithm::Response>* FileProcess::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::Algorithm::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Algorithm::Response>* FileProcess::Stub::ListFeaturesRaw(::grpc::ClientContext* context, const ::Algorithm::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::Algorithm::Response>::Create(channel_.get(), rpcmethod_ListFeatures_, context, request);
}

void FileProcess::Stub::experimental_async::ListFeatures(::grpc::ClientContext* context, ::Algorithm::Request* request, ::grpc::experimental::ClientReadReactor< ::Algorithm::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Algorithm::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFeatures_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Algorithm::Response>* FileProcess::Stub::AsyncListFeaturesRaw(::grpc::ClientContext* context, const ::Algorithm::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Algorithm::Response>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Algorithm::Response>* FileProcess::Stub::PrepareAsyncListFeaturesRaw(::grpc::ClientContext* context, const ::Algorithm::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Algorithm::Response>::Create(channel_.get(), cq, rpcmethod_ListFeatures_, context, request, false, nullptr);
}

FileProcess::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcess_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileProcess::Service, ::Algorithm::Request, ::Algorithm::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileProcess::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Algorithm::Request* req,
             ::Algorithm::Response* resp) {
               return service->Process(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcess_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileProcess::Service, ::Algorithm::Request, ::Algorithm::Response>(
          [](FileProcess::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Algorithm::Request* req,
             ::grpc::ServerWriter<::Algorithm::Response>* writer) {
               return service->ListFeatures(ctx, req, writer);
             }, this)));
}

FileProcess::Service::~Service() {
}

::grpc::Status FileProcess::Service::Process(::grpc::ServerContext* context, const ::Algorithm::Request* request, ::Algorithm::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcess::Service::ListFeatures(::grpc::ServerContext* context, const ::Algorithm::Request* request, ::grpc::ServerWriter< ::Algorithm::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Algorithm

